{"version":3,"file":"static/js/71.752ed399.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPost/MyPost.module.css?5bea","webpack://my-app/./src/components/Profile/MyPost/Post/Post.module.css?5715","components/Profile/MyPost/Post/Post.tsx","webpack://my-app/./src/components/Profile/MyPost/AddNewPostForm/AddNewPostForm.module.css?9c82","components/Profile/MyPost/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/MyPost/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__aUk8J\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__IIcph\",\"refreshPhoto\":\"ProfileInfo_refreshPhoto__sqVl5\",\"loadingPhoto\":\"ProfileInfo_loadingPhoto__INVb2\",\"user\":\"ProfileInfo_user__Dk4Mu\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusType> = ({status, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [profileStatus, setProfileStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setProfileStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n\r\n        setEditMode(false)\r\n        updateStatus(profileStatus)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProfileStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {!editMode ?\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{status || 'No status'}</span>\r\n            </div> :\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus value={profileStatus} onBlur={deActivateEditMode}/>\r\n            </div>\r\n        })\r\n    </div>\r\n}\r\nexport default ProfileStatusWithHooks","import React, {ChangeEvent} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"Preloader/Preloader\";\r\nimport {ProfileType} from \"components/redux/reducer/profileReducer\";\r\nimport ProfileStatusWithHooks from \"components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks\";\r\nimport userPhoto from './../../../assets/images/bussiness-man.png'\r\nimport loadingPhoto from './../../../assets/images/loadingPhoto.png'\r\n\r\ntype ProfileInfo = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfo> = ({profile, updateStatus, status, isOwner, savePhoto}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    let profilePhoto = profile.photos.large ? profile.photos.large : userPhoto\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.user} src={profilePhoto}/>\r\n                {isOwner && (<>\r\n                        <label className={s.customFileInput} htmlFor={\"add_avatar\"}>\r\n                            <div className={s.refreshPhoto}>\r\n                                <img className={s.loadingPhoto} src={loadingPhoto}/>\r\n                                Загрузить фото\r\n                            </div>\r\n                        </label>\r\n\r\n                        <input\r\n                            id={\"add_avatar\"}\r\n                            hidden\r\n                            type=\"file\"\r\n                            name=\"file\"\r\n                            onChange={onMainPhotoSelected}\r\n                        />\r\n                    </>\r\n                )}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <ul>\r\n                    <li>\r\n                        <span>{profile.contacts.facebook}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{profile.contacts.github}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{profile.contacts.vk}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{profile.contacts.instagram}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{profile.contacts.twitter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPost_postBlock__6vI7y\",\"posts\":\"MyPost_posts__zBSHf\",\"addPost\":\"MyPost_addPost__ukw3i\",\"h3\":\"MyPost_h3__WFJl1\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__NdJ--\",\"textContainer\":\"Post_textContainer__kA-1s\",\"likeContainer\":\"Post_likeContainer__zKa6l\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport manUser from './../../../../assets/images/man.png'\r\n\r\ntype PostPropsType = {\r\n    messages: string\r\n    likesCount: number\r\n}\r\nexport const Post: React.FC<PostPropsType> = ({likesCount, messages}) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src={manUser}/>\r\n                <div className={s.textContainer}>\r\n                    {messages}\r\n                </div>\r\n\r\n            </div>\r\n            <div className={s.likeContainer}>\r\n                <span>Like {likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"AddNewPostForm_btn__a9tNn\"};","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators.js\";\r\nimport {createField, TextArea} from \"../../../common/FormsControls/FormsControls\";\r\nimport s from './AddNewPostForm.module.css'\r\n\r\nexport type AddNewPostFormType = {\r\n    newPost: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {createField('newPost', [required,maxLength10], TextArea, 'Post Message', 'input')}\r\n            <div>\r\n                <button className={s.btn}>ADD YOUR POST</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'AddNewPostForm'})(AddNewPostForm)\r\n","import React from \"react\";\r\nimport s from \"../MyPost/MyPost.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostContainer\";\r\nimport {AddNewPostFormRedux, AddNewPostFormType} from \"./AddNewPostForm/AddNewPostForm\";\r\n\r\nexport const MyPost: React.FC<MyPostPropsType> = React.memo(({posts, addPost}) => {\r\n\r\n    const postElements = posts.map((el, index) => <Post key={index} messages={el.messages} likesCount={el.likesCount}/>)\r\n\r\n    const addNewProfile = (values: AddNewPostFormType) => {\r\n        addPost(values.newPost)\r\n    }\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3 className={s.h3}>My post</h3>\r\n            <div className={s.addPost}>\r\n                <div>\r\n                    <AddNewPostFormRedux onSubmit={addNewProfile}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {addPostAC, PostType} from \"components/redux/reducer/profileReducer\";\r\nimport {MyPost} from \"./MyPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type MyPostPropsType = MyPostDispatchPropsType & mapStateToPropsType\r\n\r\ntype MyPostDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype  mapStateToPropsType = {\r\n    posts: PostType[],\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MyPostDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPost/MyPostContainer\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\nimport {Preloader} from \"Preloader/Preloader\";\r\n\r\ntype ProfilePagePropType = {\r\n    isOwner:boolean\r\n    savePhoto:(file: File) => void\r\n    status:string\r\n}\r\nexport const Profile: React.FC<ProfileContainerPropsType & ProfilePagePropType> = ({profile,savePhoto, status, updateStatus,isOwner}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo savePhoto={savePhoto} isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostContainer/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfile,\r\n    getStatus,\r\n    ProfileType,\r\n    setUsersProfile,\r\n    updateStatus, savePhoto\r\n} from \"components/redux/reducer/profileReducer\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\nimport {Profile} from \"./Profile\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype mapStateToProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: null | number\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToProps = {\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type ProfileContainerPropsType = mapStateToProps & mapDispatchToProps\r\nexport type OwnType = ProfileContainerPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<OwnType> {\r\n\r\n    refreshProfile() {\r\n        const {authorizedUserId, history, getUserProfile, getUserStatus} = this.props\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = authorizedUserId === null ? '2' : authorizedUserId.toString()\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<OwnType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile isOwner={!this.props.match.params.userId} {...this.props} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStateToProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.authUsers.userId,\r\n    isAuth: state.authUsers.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    setUsersProfile,\r\n    getUserProfile,\r\n    getUserStatus: getStatus, updateStatus, savePhoto\r\n}), withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n\r\n"],"names":["_ref","status","updateStatus","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","profileStatus","setProfileStatus","useEffect","_jsxs","children","_jsx","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileInfo","profile","isOwner","savePhoto","Preloader","profilePhoto","photos","large","userPhoto","className","s","descriptionBlock","user","src","_Fragment","customFileInput","htmlFor","refreshPhoto","loadingPhoto","id","hidden","type","name","target","files","length","ProfileStatusWithHooks","contacts","facebook","github","vk","instagram","twitter","Post","likesCount","messages","manUser","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","handleSubmit","onSubmit","createField","required","TextArea","MyPost","React","posts","addPost","postElements","map","el","index","values","newPost","MyPostContainer","connect","state","profilePage","dispatch","newPostText","addPostAC","Profile","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","_this$props","this","props","authorizedUserId","history","getUserProfile","getUserStatus","userId","match","params","toString","push","refreshProfile","prevProps","prevState","snapshot","_objectSpread","compose","authUsers","isAuth","setUsersProfile","getStatus","withRouter","withAuthRedirect"],"sourceRoot":""}