{"version":3,"file":"static/js/415.af671fd5.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPost/MyPost.module.css?5bea","webpack://my-app/./src/components/Profile/MyPost/Post/Post.module.css?5715","components/Profile/MyPost/Post/Post.tsx","webpack://my-app/./src/components/Profile/MyPost/AddNewPostForm/AddNewPostForm.module.css?9c82","components/Profile/MyPost/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/MyPost/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__aUk8J\"};","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"ProfileInfo_profile__SKOE4\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__IIcph\",\"user\":\"ProfileInfo_user__Dk4Mu\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusType> = ({status, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [profileStatus, setProfileStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setProfileStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n\r\n        setEditMode(false)\r\n        updateStatus(profileStatus)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProfileStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {!editMode ?\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{status || 'No status'}</span>\r\n            </div> :\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus value={profileStatus} onBlur={deActivateEditMode}/>\r\n            </div>\r\n        })\r\n    </div>\r\n}\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"Preloader/Preloader\";\r\nimport {ProfileType} from \"components/redux/reducer/profileReducer\";\r\nimport ProfileStatusWithHooks from \"components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks\";\r\nimport User from './../../../assets/images/bussiness-man.png'\r\n\r\ntype ProfileInfo = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfo> = ({profile, updateStatus, status}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profile}>\r\n                <img className={s.user} src={User}/>\r\n            <div className={s.descriptionBlock}>\r\n\r\n                <img src={profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                <ul>\r\n                    <li>\r\n                        <span>{profile.contacts.facebook}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{profile.contacts.github}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{profile.contacts.vk}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{profile.contacts.instagram}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{profile.contacts.twitter}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPost_postBlock__6vI7y\",\"posts\":\"MyPost_posts__zBSHf\",\"addPost\":\"MyPost_addPost__ukw3i\",\"h3\":\"MyPost_h3__WFJl1\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__NdJ--\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport manUser from './../../../../assets/images/man.png'\r\n\r\ntype PostPropsType = {\r\n    messages: string\r\n    likesCount: number\r\n}\r\nexport const Post: React.FC<PostPropsType> = ({likesCount, messages}) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src={manUser}/>{messages}\r\n                <div><span>Like {likesCount}</span></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"AddNewPostForm_btn__a9tNn\"};","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators.js\";\r\nimport {createField, TextArea} from \"../../../common/FormsControls/FormsControls\";\r\nimport s from './AddNewPostForm.module.css'\r\n\r\nexport type AddNewPostFormType = {\r\n    newPost: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {createField('newPost', [required,maxLength10], TextArea, 'Post Message', 'input')}\r\n            <div>\r\n                <button className={s.btn}>ADD YOUR POST</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'AddNewPostForm'})(AddNewPostForm)\r\n","import React from \"react\";\r\nimport s from \"../MyPost/MyPost.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostContainer\";\r\nimport {AddNewPostFormRedux, AddNewPostFormType} from \"./AddNewPostForm/AddNewPostForm\";\r\n\r\nexport const MyPost: React.FC<MyPostPropsType> = React.memo(({posts, addPost}) => {\r\n\r\n    const postElements = posts.map((el, index) => <Post key={index} messages={el.messages} likesCount={el.likesCount}/>)\r\n\r\n    const addNewProfile = (values: AddNewPostFormType) => {\r\n        debugger\r\n        addPost(values.newPost)\r\n    }\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3 className={s.h3}>My post</h3>\r\n            <div className={s.addPost}>\r\n                <div>\r\n                    <AddNewPostFormRedux onSubmit={addNewProfile}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {addPostAC, PostType} from \"components/redux/reducer/profileReducer\";\r\nimport {MyPost} from \"./MyPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type MyPostPropsType = MyPostDispatchPropsType & mapStateToPropsType\r\n\r\ntype MyPostDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype  mapStateToPropsType = {\r\n    posts: PostType[],\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MyPostDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPost/MyPostContainer\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\n\r\nexport const Profile: React.FC<ProfileContainerPropsType> = ({profile, status, updateStatus}) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostContainer/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfile,\r\n    getStatus,\r\n    ProfileType,\r\n    setUsersProfile,\r\n    updateStatus\r\n} from \"components/redux/reducer/profileReducer\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\nimport {Profile} from \"./Profile\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype mapStateToProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: null | number\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToProps = {\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type ProfileContainerPropsType = mapStateToProps & mapDispatchToProps\r\nexport type OwnType = ProfileContainerPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<OwnType> {\r\n    componentDidMount() {\r\n        const {authorizedUserId, history, getUserProfile, getUserStatus} = this.props\r\n\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = authorizedUserId === null ? '2' : authorizedUserId.toString()\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile{...this.props} profile={this.props.profile} status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStateToProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.authUsers.userId,\r\n    isAuth: state.authUsers.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    setUsersProfile,\r\n    getUserProfile,\r\n    getUserStatus: getStatus, updateStatus\r\n}), withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n\r\n"],"names":["_ref","status","updateStatus","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","profileStatus","setProfileStatus","useEffect","_jsxs","children","_jsx","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileInfo","profile","className","s","src","User","photos","large","ProfileStatusWithHooks","contacts","facebook","github","vk","instagram","twitter","Preloader","Post","likesCount","messages","manUser","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","handleSubmit","onSubmit","createField","required","TextArea","MyPost","React","posts","addPost","postElements","map","el","index","values","newPost","MyPostContainer","connect","state","profilePage","dispatch","newPostText","addPostAC","Profile","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","_this$props","this","props","authorizedUserId","history","getUserProfile","getUserStatus","userId","match","params","toString","push","_objectSpread","compose","authUsers","isAuth","setUsersProfile","getStatus","withRouter","withAuthRedirect"],"sourceRoot":""}