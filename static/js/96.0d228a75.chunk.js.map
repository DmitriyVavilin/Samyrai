{"version":3,"file":"static/js/96.0d228a75.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/Profile.module.css?b512","webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPost/MyPost.module.css?5bea","webpack://my-app/./src/components/Profile/MyPost/Post/Post.module.css?5715","components/Profile/MyPost/Post/Post.tsx","webpack://my-app/./src/components/Profile/MyPost/AddNewPostForm/AddNewPostForm.module.css?9c82","components/Profile/MyPost/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/MyPost/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__aUk8J\"};","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__IIcph\",\"refreshPhoto\":\"ProfileInfo_refreshPhoto__sqVl5\",\"loadingPhoto\":\"ProfileInfo_loadingPhoto__INVb2\",\"contact\":\"ProfileInfo_contact__CrO9B\",\"user\":\"ProfileInfo_user__Dk4Mu\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<ProfileStatusType> = ({status, updateStatus}) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [profileStatus, setProfileStatus] = useState(status)\r\n\r\n    useEffect(() => {\r\n        setProfileStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n\r\n        setEditMode(false)\r\n        updateStatus(profileStatus)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setProfileStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {!editMode ?\r\n            <div>\r\n              <b>Status:</b>  <span onDoubleClick={activateEditMode}>{status || 'No status'}</span>\r\n            </div> :\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus value={profileStatus} onBlur={deActivateEditMode}/>\r\n            </div>\r\n        }\r\n    </div>\r\n}\r\nexport default ProfileStatusWithHooks","import React from \"react\";\r\nimport {createField, Input, TextArea} from \"components/common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"components/redux/redux-store\";\r\nimport {ProfileType} from \"components/redux/reducer/profileReducer\";\r\nimport s from \"components/Login/LoginForm/LoginForm.module.css\";\r\n\r\nexport type ProfileDataFormType = {\r\n    fullName: string\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType>> = ({handleSubmit,error   }) => {\r\n    const profile = useSelector<RootStateType, ProfileType>(state => state.profilePage.profile)\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <button>Save</button>\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full Name:</b> {createField('fullName', [], Input,\r\n                'Full name', 'input')}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                {createField('lookingForAJob', [], Input,\r\n                    'Looking forA job', 'checkbox',)}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                {createField('lookingForAJobDescription', [], TextArea,\r\n                    'My professional skills', 'textarea',)}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                {createField('AboutMe', [], TextArea,\r\n                    'About me', 'textarea',)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map((key) => {\r\n                // @ts-ignore\r\n                return <div key={key}>\r\n                    <b> {createField(key, [], Input, \"contacts.\" + key, 'input')}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormRedux = reduxForm<ProfileDataFormType>({\r\n    form: 'edit-profile'\r\n})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormRedux","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"Preloader/Preloader\";\r\nimport {ProfileType} from \"components/redux/reducer/profileReducer\";\r\nimport ProfileStatusWithHooks from \"components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks\";\r\nimport userPhoto from './../../../assets/images/bussiness-man.png'\r\nimport loadingPhoto from './../../../assets/images/loadingPhoto.png'\r\nimport ProfileDataFormRedux, {ProfileDataFormType} from \"components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfileInfo = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileDataFormType) => Promise<void>\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfo> = ({\r\n                                                       profile,\r\n                                                       updateStatus,\r\n                                                       status,\r\n                                                       isOwner,\r\n                                                       savePhoto,\r\n                                                       saveProfile\r\n                                                   }) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onSubmit = (data: ProfileDataFormType) => {\r\n        saveProfile(data).then(() =>{\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    let profilePhoto = profile.photos.large ? profile.photos.large : userPhoto\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div className={s.profile}>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.user} src={profilePhoto}/>\r\n                {isOwner && (<>\r\n                        <label className={s.customFileInput} htmlFor={\"add_avatar\"}>\r\n                            <div className={s.refreshPhoto}>\r\n                                <img className={s.loadingPhoto} src={loadingPhoto}/>\r\n                                Загрузить фото\r\n                            </div>\r\n                        </label>\r\n                        <input\r\n                            id={\"add_avatar\"}\r\n                            hidden\r\n                            type=\"file\"\r\n                            name=\"file\"\r\n                            onChange={onMainPhotoSelected}\r\n                        />\r\n                    </>\r\n                )}\r\n                {editMode\r\n                    ? <ProfileDataFormRedux initialValues={{\r\n                        fullName: profile.fullName,\r\n                        aboutMe: profile.aboutMe,\r\n                        lookingForAJob: profile.lookingForAJob,\r\n                        lookingForAJobDescription: profile.lookingForAJobDescription\r\n                    }} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => setEditMode(true)} profile={profile} isOwner={isOwner}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactTypeProps = {\r\n    contactTitle: string\r\n    contactValue: any\r\n}\r\n\r\ntype ProfileDataProps = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataProps> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full Name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob && <div>\r\n                <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map((key) => {\r\n                // @ts-ignore\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Contact: React.FC<ContactTypeProps> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPost_postBlock__6vI7y\",\"posts\":\"MyPost_posts__zBSHf\",\"addPost\":\"MyPost_addPost__ukw3i\",\"h3\":\"MyPost_h3__WFJl1\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__NdJ--\",\"textContainer\":\"Post_textContainer__kA-1s\",\"likeContainer\":\"Post_likeContainer__zKa6l\"};","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport manUser from './../../../../assets/images/man.png'\r\n\r\ntype PostPropsType = {\r\n    messages: string\r\n    likesCount: number\r\n}\r\nexport const Post: React.FC<PostPropsType> = ({likesCount, messages}) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src={manUser}/>\r\n                <div className={s.textContainer}>\r\n                    {messages}\r\n                </div>\r\n\r\n            </div>\r\n            <div className={s.likeContainer}>\r\n                <span>Like {likesCount}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"AddNewPostForm_btn__a9tNn\"};","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators.js\";\r\nimport {createField, TextArea} from \"../../../common/FormsControls/FormsControls\";\r\nimport s from './AddNewPostForm.module.css'\r\n\r\nexport type AddNewPostFormType = {\r\n    newPost: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n                {createField('newPost', [required,maxLength10], TextArea, 'Post Message', 'input')}\r\n            <div>\r\n                <button className={s.btn}>ADD YOUR POST</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddNewPostFormRedux = reduxForm<AddNewPostFormType>({form: 'AddNewPostForm'})(AddNewPostForm)\r\n","import React from \"react\";\r\nimport s from \"../MyPost/MyPost.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostPropsType} from \"./MyPostContainer\";\r\nimport {AddNewPostFormRedux, AddNewPostFormType} from \"./AddNewPostForm/AddNewPostForm\";\r\n\r\nexport const MyPost: React.FC<MyPostPropsType> = React.memo(({posts, addPost}) => {\r\n\r\n    const postElements = posts.map((el, index) => <Post key={index} messages={el.messages} likesCount={el.likesCount}/>)\r\n\r\n    const addNewProfile = (values: AddNewPostFormType) => {\r\n        addPost(values.newPost)\r\n    }\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3 className={s.h3}>My post</h3>\r\n            <div className={s.addPost}>\r\n                <div>\r\n                    <AddNewPostFormRedux onSubmit={addNewProfile}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React from \"react\";\r\nimport {addPostAC, PostType} from \"components/redux/reducer/profileReducer\";\r\nimport {MyPost} from \"./MyPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type MyPostPropsType = MyPostDispatchPropsType & mapStateToPropsType\r\n\r\ntype MyPostDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype  mapStateToPropsType = {\r\n    posts: PostType[],\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MyPostDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPost/MyPostContainer\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\nimport {Preloader} from \"Preloader/Preloader\";\r\nimport {ProfileDataFormType} from \"components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\ntype ProfilePagePropType = {\r\n    isOwner:boolean\r\n    savePhoto:(file: File) => void\r\n    status:string\r\n    saveProfile: (profile: ProfileDataFormType) => Promise<void>\r\n}\r\nexport const Profile: React.FC<ProfileContainerPropsType & ProfilePagePropType> = ({profile,savePhoto, status, updateStatus,isOwner,saveProfile}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo  saveProfile={saveProfile} savePhoto={savePhoto} isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostContainer/>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfile,\r\n    getStatus,\r\n    ProfileType,\r\n    setUsersProfile,\r\n    updateStatus, savePhoto, saveProfile\r\n} from \"components/redux/reducer/profileReducer\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\nimport {Profile} from \"./Profile\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataFormType} from \"components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\n\r\ntype mapStateToProps = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: null | number\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToProps = {\r\n    setUsersProfile: (profile: ProfileType) => void\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileDataFormType) => Promise<void>\r\n\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\nexport type ProfileContainerPropsType = mapStateToProps & mapDispatchToProps\r\nexport type OwnType = ProfileContainerPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainer extends React.Component<OwnType> {\r\n\r\n    refreshProfile() {\r\n        const {authorizedUserId, history, getUserProfile, getUserStatus} = this.props\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = authorizedUserId === null ? '2' : authorizedUserId.toString()\r\n            if (!userId) {\r\n                history.push('/login')\r\n            }\r\n        }\r\n        getUserProfile(userId)\r\n        getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<OwnType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile  isOwner={!this.props.match.params.userId} {...this.props} profile={this.props.profile} status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType): mapStateToProps => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.authUsers.userId,\r\n    isAuth: state.authUsers.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    setUsersProfile,\r\n    getUserProfile,\r\n    getUserStatus: getStatus, updateStatus, savePhoto,saveProfile\r\n}), withRouter, withAuthRedirect)(ProfileContainer)\r\n\r\n\r\n"],"names":["_ref","status","updateStatus","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","profileStatus","setProfileStatus","useEffect","_jsx","children","onChange","e","currentTarget","value","autoFocus","onBlur","_jsxs","onDoubleClick","reduxForm","form","handleSubmit","error","profile","useSelector","state","profilePage","onSubmit","className","s","formSummaryError","createField","Input","TextArea","Object","keys","contacts","map","key","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","profilePhoto","photos","large","userPhoto","descriptionBlock","user","src","_Fragment","customFileInput","htmlFor","refreshPhoto","loadingPhoto","id","hidden","type","name","target","files","length","ProfileDataFormRedux","initialValues","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","data","then","ProfileData","goToEditMode","ProfileStatusWithHooks","_ref2","onClick","Contact","contactTitle","contactValue","_ref3","contact","Post","likesCount","messages","manUser","maxLength10","maxLengthCreator","AddNewPostFormRedux","required","MyPost","React","posts","addPost","postElements","el","index","values","newPost","MyPostContainer","connect","dispatch","newPostText","addPostAC","Profile","ProfileContainer","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","_this$props","this","props","authorizedUserId","history","getUserProfile","getUserStatus","userId","match","params","toString","push","refreshProfile","prevProps","prevState","snapshot","_objectSpread","compose","authUsers","isAuth","setUsersProfile","getStatus","withRouter","withAuthRedirect"],"sourceRoot":""}