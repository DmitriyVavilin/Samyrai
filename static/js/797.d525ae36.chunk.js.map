{"version":3,"file":"static/js/797.d525ae36.chunk.js","mappings":"6LACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA8I,4BAA9I,EAAkN,0BAAlN,EAAsP,yB,mBCQzOA,EAA8C,SAAHC,GAAoB,IAAfC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KACzDC,EAAO,YAAcF,EACzB,OACIG,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAY,IAAMA,EAASC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EACXG,IAAK,2GAEdD,EAAAA,EAAAA,KAACE,EAAAA,GAAO,CAACC,GAAIR,EAAKI,SAAEL,MAGhC,ECbaU,EAAgD,SAAHZ,GAAmB,IAAda,EAAOb,EAAPa,QAC3D,OACIL,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAUC,SAAEM,GAEpC,E,uCCFMC,GAAeC,EAAAA,EAAAA,GAAiB,KAgBzBC,GAAsBC,EAAAA,EAAAA,GAA8B,CAACC,KAAM,sBAArCD,EAdqC,SAAHjB,GAAwB,IAAnBmB,EAAYnB,EAAZmB,aACtE,OACIf,EAAAA,EAAAA,MAAA,QAAMgB,SAAUD,EAAaZ,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACa,EAAAA,EAAK,CAACC,YAAa,qBAAsBC,UAAWC,EAAAA,GAAUtB,KAAM,iBAC9DuB,SAAU,CAACC,EAAAA,EAAUZ,QAEhCN,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,aAIxB,I,UCYA,GAAeoB,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KAfpB,SAACC,GACrB,MAAO,CACHC,YAAaD,EAAMC,YAE3B,IAE2B,SAACC,GACxB,MAAO,CACHC,mBAAoB,SAACC,GACjBF,GAASC,EAAAA,EAAAA,GAAmBC,GAChC,EAGR,IAE0FC,EAAAA,GAAYC,EAAAA,EAAtG,EC5BmD,SAAHnC,GAA2C,IAAtC8B,EAAW9B,EAAX8B,YAAaE,EAAkBhC,EAAlBgC,mBACxDI,EAAkBN,EAAYO,QAAQC,KAAI,SAACC,GAAC,OAAK/B,EAAAA,EAAAA,KAACT,EAAW,CAAYG,KAAMqC,EAAErC,KAAMD,GAAIsC,EAAEtC,IAA1BsC,EAAEtC,GAA6B,IAClGuC,EAAmBV,EAAYW,SAASH,KAAI,SAACI,GAAC,OAAKlC,EAAAA,EAAAA,KAACI,EAAY,CAAYC,QAAS6B,EAAE7B,SAAjB6B,EAAEzC,GAAyB,IAMvG,OACIG,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAUC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAeC,SAC1B6B,KAELhC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAWC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,OAAAD,SAAMiC,KACNhC,EAAAA,EAAAA,KAACQ,EAAmB,CAACI,SAXX,SAACuB,GACnBX,EAAmBW,EAAOV,eAC9B,SAaJ,G","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItems/DialogItems.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/DialogsForm/AddMessageForm.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__yJMMT\",\"dialogs_item\":\"Dialogs_dialogs_item__0rpHk\",\"active\":\"Dialogs_active__oXo76\",\"dialogsImg\":\"Dialogs_dialogsImg__7ualt\",\"item\":\"Dialogs_item__Z0WUv\",\"messages\":\"Dialogs_messages__rHnDt\",\"message\":\"Dialogs_message__6LvXz\"};","import {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport s from './../Dialogs.module.css'\r\n\r\nexport type DialogItemsPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItems: React.FC<DialogItemsPropsType> = ({id, name}) => {\r\n    let path = '/dialogs1' + id\r\n    return (\r\n        <div className={s.dialogs + ' ' + s.active}>\r\n            <div>\r\n                <img className={s.dialogsImg}\r\n                     src={'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRffk80ltMT1J-0nN3YDGzPq6pbfGWQeC50ug&usqp=CAU'}/>\r\n            </div>\r\n            <NavLink to={path}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import s from \"../Dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\nexport type MessagesItemPropsType = {\r\n    message: string\r\n}\r\n\r\nexport const MessagesItem: React.FC<MessagesItemPropsType> = ({message}) => {\r\n    return (\r\n        <div className={s.message}>{message}</div>\r\n    )\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"utils/validators/validators.js\";\r\n\r\nexport type AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = ({handleSubmit}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'Enter your message'} component={TextArea} name={'newMessageBody'}\r\n                       validate={[required, maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport const AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogsMessageForm'})(AddMessageForm)\r\n","import React from \"react\";\r\nimport {sendMessageCreator, StateDialogsType} from \"components/redux/reducer/dialogsReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: StateDialogsType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessageCreator: (newMessageBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessageCreator: (newMessageBody: string) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withRouter, withAuthRedirect)(Dialogs)\r\n\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {DialogItems} from \"./DialogItems/DialogItems\";\r\nimport {MessagesItem} from \"./MessageItem/MessageItem\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {AddMessageFormRedux, AddMessageFormType} from \"./DialogsForm/AddMessageForm\";\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = ({dialogsPage, sendMessageCreator}) => {\r\n    const dialogsElements = dialogsPage.dialogs.map((d) => <DialogItems key={d.id} name={d.name} id={d.id}/>)\r\n    const messagesElements = dialogsPage.messages.map((m) => <MessagesItem key={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (values: AddMessageFormType) => {\r\n        sendMessageCreator(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogs_item}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}"],"names":["DialogItems","_ref","id","name","path","_jsxs","className","s","children","_jsx","src","NavLink","to","MessagesItem","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","component","TextArea","validate","required","compose","connect","state","dialogsPage","dispatch","sendMessageCreator","newMessageBody","withRouter","withAuthRedirect","dialogsElements","dialogs","map","d","messagesElements","messages","m","values"],"sourceRoot":""}